{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/Searchbox.js","Components/CounterButton.js","Components/Header.js","Containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","Searchbox","searchfield","searchChange","type","placeholder","onChange","CounterButton","updateCount","setState","count","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","err","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e227a876.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport 'tachyons'\r\nconst Card = ({name,email,id}) =>{\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt={id} src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) =>{\r\n\t//if(true){\r\n\t\t//throw new Error('Error');\r\n\t//}\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname ={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default CardList","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll',\r\n\t\tborder: '5px solid black',\r\n\t\theight: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\ttype='search'\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange = {searchChange}/>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Searchbox;","import React,{ Component } from 'react';\r\n\r\nclass CounterButton extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount:0\r\n\t\t}\r\n\t}\r\n\tshouldComponentUpdate(nextProps,nextState){\r\n\t\tif(this.state.count!== nextState.count){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state => {\r\n\t\t\treturn {count: state.count + 1}\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\t\treturn <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n\t\t\r\n\t}\r\n}\r\nexport default CounterButton;","import React,{ Component } from 'react';\r\nimport CounterButton from './CounterButton'\r\nclass Header extends Component{\r\n\tshouldComponentUpdate(nextProps,nextState){\r\n\t\treturn false;\r\n\t}\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<CounterButton color={'red'}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Header;","import React,{ Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../Components/CardList'\r\nimport Scroll from '../Components/Scroll'\r\nimport Searchbox from '../Components/Searchbox'\r\nimport Header from '../Components/Header'\r\nimport './App.css'\r\nimport {setSearchField,requestRobots} from '../actions'\r\nconst mapStateToProps = state => {\r\n  return{\r\n    searchField : state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    err: state.requestRobots.err\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())    \r\n  }\r\n}\r\nclass App extends Component {\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n    }\r\n    \r\n  render(){ \r\n    const {searchField, onSearchChange,robots,isPending} = this.props;\r\n    const filteredRobots = robots.filter(robots =>{\r\n      return robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <Header/>\r\n        <Searchbox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n      </div>\r\n      );\r\n    \r\n    \r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\t} from './constants.js'\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(err => dispatch({type:REQUEST_ROBOTS_FAILED,payload:err}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\t} from './constants.js'\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\nexport const searchRobots = (state=initialStateSearch,action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state,{searchField:action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terr: ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots,action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state,{isPending:true})\r\n\t\r\n\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t    return Object.assign({},state,{robots:action.payload,isPending:false});\r\n\t\r\n\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state,{err:action.payload,isPending:false})\r\n\t\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './Containers/App'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { Provider} from 'react-redux';\r\nimport {searchRobots,requestRobots} from './reducers';\r\nimport { createStore,applyMiddleware,combineReducers } from 'redux';\r\nimport {createLogger} from 'redux-logger'\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>,document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}